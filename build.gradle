buildscript {
    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
    repositories {
        jcenter()
        mavenCentral()
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.0'
    id 'org.ajoberstar.grgit' version '4.0.2'
    id 'maven-publish'
}

//import org.jetbrains.kotlin.gradle.targets.native.tasks.KotlinNativeSimulatorTest_Decorated
//import org.jetbrains.kotlin.gradle.targets.native.tasks.KotlinNativeHostTest_Decorated

repositories {
    jcenter()
    mavenCentral()
}

def localProperties = new Properties()
def propertiesFile = rootProject.file('local.properties')
if (propertiesFile.exists()) {
    localProperties.load(propertiesFile.newDataInputStream())
}
group = 'nl.blackstardlb'
version = '0.0.2'

ext {
    gumbo_dir = new File(buildDir, "gumbo-parser")
    gumbo_repo = "https://github.com/google/gumbo-parser.git"
    gumbo_branch = "origin/master"
    gumbo_script = new File(projectDir, "scripts/make-gumbo.sh")
    gumbo_def_file = new File(projectDir, "src/nativeInterop/cinterop/gumbo.def")
    gumbo_lib_dir = new File(gumbo_dir, "output/lib")
    test_resources_folder = new File(projectDir, "src/commonTest/resources")
    bintrayUser = localProperties.get("bintrayUser")
    bintrayApiKey = localProperties.get("bintrayApiKey")
}

task generateDefFile() {
    if (!gumbo_def_file.exists()) {
        gumbo_def_file.createNewFile()
        gumbo_def_file.text = """headers = include/gumbo.h
compilerOpts = -Ibuild/gumbo-parser/output
staticLibraries.linux = libgumbo.a libgumbo.la libgumbo.so libgumbo.so.1 libgumbo.so.1.0.0
staticLibraries.osx = libgumbo.1.dylib libgumbo.a libgumbo.dylib libgumbo.la
staticLibraries.ios = libgumbo.1.dylib libgumbo.a libgumbo.dylib libgumbo.la
libraryPaths = $gumbo_lib_dir 
"""
    }
}

def hostOs = System.getProperty("os.name")
def isLinux = hostOs == "Linux"

kotlin {
    jvm {
        compilations.all {
            kotlinOptions.jvmTarget = '1.8'
        }
    }
    ios() {
        compilations.main.cinterops {
            gumbo
        }
    }
    macosX64('macos') {
        compilations.main.cinterops {
            gumbo
        }
    }

    if (isLinux) {
        linuxX64("linux") {
            compilations.main.cinterops {
                gumbo
            }
        }
    }
    configure([targets["metadata"], jvm()]) {
        mavenPublication { targetPublication ->
            tasks.withType(AbstractPublishToMaven)
                    .matching { it.publication == targetPublication }
                    .all { onlyIf { isLinux } }
        }
    }
    sourceSets {
        commonMain {

        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        nativeMain {
            dependsOn(commonMain)
        }
        nativeTest {
            dependsOn(commonTest)
        }
        linuxMain {
            dependsOn(nativeMain)
        }
        linuxTest {
            dependsOn(nativeTest)
        }
        macosMain {
            dependsOn(nativeMain)
        }
        macosTest {
            dependsOn(nativeTest)
        }
        iosMain {
            dependsOn(nativeMain)
        }
        iosTest {
            dependsOn(nativeTest)
        }
        jvmMain {
            dependencies {
                implementation 'org.jsoup:jsoup:1.13.1'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
            }
        }
    }
}

def getBintrayUserProperty() {
    return bintrayUser != null ? bintrayUser : System.getenv('BINTRAY_USER')
}

def getBintrayApiKeyProperty() {
    return bintrayApiKey != null ? bintrayApiKey : System.getenv('BINTRAY_API_KEY')
}

task cleanGumbo(type: Delete) {
    delete(gumbo_dir)
    tasks.clean.dependsOn(cleanGumbo)
}

task cleanGumboDef(type: Delete) {
    delete(gumbo_def_file)
    tasks.clean.dependsOn(cleanGumboDef)
}

task cloneGumbo(dependsOn: cleanGumbo) {
    doLast {
        def gr = org.ajoberstar.grgit.Grgit.clone(dir: "$gumbo_dir", uri: "$gumbo_repo")
        gr.checkout(branch: "$gumbo_branch")
    }
}

task makeGumbo(type: Exec) {
    def shouldRun = !file("$gumbo_dir/output").exists()
    if (shouldRun) {
        dependsOn "cloneGumbo"
    }
    onlyIf { shouldRun }
    workingDir gumbo_dir
    commandLine "$gumbo_script"
}

tasks.each {
    if (it.name.startsWith("cinteropGumbo")) {
        it.dependsOn("makeGumbo")
    }
}

publishing {
    repositories {
        maven {
            name = "Bintray"
            url = uri("https://api.bintray.com/maven/blackstardlb/GumboSoup/gumbo-soup/;publish=1;override=1")
            credentials {
                username = getBintrayUserProperty()
                password = getBintrayApiKeyProperty()
            }
        }
    }
}

tasks.each {
    if (it.class.name == "org.jetbrains.kotlin.gradle.targets.native.tasks.KotlinNativeHostTest_Decorated") {
        it.doFirst {
            environment 'RESOURCES_FOLDER', "$test_resources_folder/"
        }
    }
    if (it.class.name == "org.jetbrains.kotlin.gradle.targets.native.tasks.KotlinNativeSimulatorTest_Decorated") {
        it.doFirst {
            environment 'SIMCTL_CHILD_RESOURCES_FOLDER', "$test_resources_folder/"
        }
    }
}
