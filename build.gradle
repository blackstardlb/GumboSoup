import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTargetWithTests

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.0'
    id 'org.ajoberstar.grgit' version '4.0.2'
    id 'maven-publish'
}

group = 'nl.blackstardlb'
version = '0.0.2'

repositories {
    mavenCentral()
}

ext {
    gumbo_dir = new File(buildDir, "gumbo-parser")
    gumbo_repo = "https://github.com/google/gumbo-parser.git"
    gumbo_branch = "origin/master"
    gumbo_script = new File(projectDir, "scripts/make-gumbo.sh")
    gumbo_def_file = new File(projectDir, "src/nativeInterop/cinterop/gumbo.def")
    gumbo_lib_dir = new File(gumbo_dir, "output/lib")
}

task generateDefFile() {
    if (!file(gumbo_def_file).exists()) {
        file(gumbo_def_file).getParentFile().mkdirs()
        gumbo_def_file.text = """headers = include/gumbo.h
compilerOpts = -Ibuild/gumbo-parser/output
staticLibraries = libgumbo.a libgumbo.la libgumbo.so libgumbo.so.1 libgumbo.so.1.0.0
libraryPaths = $gumbo_lib_dir 
"""
    }
}

kotlin {
    jvm {
        compilations.all {
            kotlinOptions.jvmTarget = '1.8'
        }
    }
    def hostOs = System.getProperty("os.name")
    def isMingwX64 = hostOs.startsWith("Windows")
    KotlinNativeTargetWithTests nativeTarget
    if (hostOs == "Mac OS X") nativeTarget = macosX64('native')
    else if (hostOs == "Linux") nativeTarget = linuxX64("native")
    else if (isMingwX64) nativeTarget = mingwX64("native")
    else throw new GradleException("Host OS is not supported in Kotlin/Native.")

    nativeTarget.compilations.main.cinterops {
        gumbo
    }

    sourceSets {
        commonMain {

        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation 'org.jsoup:jsoup:1.13.1'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
            }
        }
        nativeMain {

        }
        nativeTest {

        }
    }
}

task cleanGumbo(type: Delete) {
    delete(gumbo_dir)
    tasks.clean.dependsOn(cleanGumbo)
}

task cloneGumbo(dependsOn: cleanGumbo) {
    doLast {
        def gr = org.ajoberstar.grgit.Grgit.clone(dir: "$gumbo_dir", uri: "$gumbo_repo")
        gr.checkout(branch: "$gumbo_branch")
    }
}

task makeGumbo(type: Exec) {
    def shouldRun = !file("$gumbo_dir/output").exists()
    if (shouldRun) {
        dependsOn "cloneGumbo"
    }
    onlyIf { shouldRun }
    workingDir gumbo_dir
    commandLine "$gumbo_script"
}

tasks.cinteropGumboNative.dependsOn("makeGumbo")

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/blackstardlb/GumboSoup"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}
